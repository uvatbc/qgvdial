/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -i QtTelepathy/Core/ConnectionAdaptor -i QtTelepathy/Common/ConnectionTypes -a :src/Core/connectionadaptor.cpp xml/tp-conn.xml
 *
 * dbusxml2cpp is Copyright (C) 2006 Trolltech ASA. All rights reserved.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "connectionadaptor.h"
#include "connectiontypes.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtCore/QDebug>

/*
 * Implementation of adaptor class ConnectionAdaptor
 */

ConnectionAdaptor::ConnectionAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

ConnectionAdaptor::~ConnectionAdaptor()
{
    // destructor
}

QStringList ConnectionAdaptor::Interfaces() const
{
    // get the value of property Interfaces
    return qvariant_cast< QStringList >(parent()->property("Interfaces"));
}

void ConnectionAdaptor::Connect()
{
    // handle method call org.freedesktop.Telepathy.Connection.Connect
    QMetaObject::invokeMethod(parent(), "Connect");
}

void ConnectionAdaptor::Disconnect()
{
    // handle method call org.freedesktop.Telepathy.Connection.Disconnect
    QMetaObject::invokeMethod(parent(), "Disconnect");
}

QStringList ConnectionAdaptor::GetInterfaces()
{
    // handle method call org.freedesktop.Telepathy.Connection.GetInterfaces
    QStringList out0;
    QMetaObject::invokeMethod(parent(), "GetInterfaces", Q_RETURN_ARG(QStringList, out0));
    return out0;
}

QString ConnectionAdaptor::GetProtocol()
{
    // handle method call org.freedesktop.Telepathy.Connection.GetProtocol
    QString out0;
    QMetaObject::invokeMethod(parent(), "GetProtocol", Q_RETURN_ARG(QString, out0));
    return out0;
}

uint ConnectionAdaptor::GetSelfHandle()
{
    // handle method call org.freedesktop.Telepathy.Connection.GetSelfHandle
    uint out0;
    QMetaObject::invokeMethod(parent(), "GetSelfHandle", Q_RETURN_ARG(uint, out0));
    return out0;
}

uint ConnectionAdaptor::GetStatus()
{
    // handle method call org.freedesktop.Telepathy.Connection.GetStatus
    uint out0;
    QMetaObject::invokeMethod(parent(), "GetStatus", Q_RETURN_ARG(uint, out0));
    return out0;
}

void ConnectionAdaptor::HoldHandles(uint handle_type, const QList<uint> &handles)
{
    qDebug() << "HoldHandles called from external!" << handles;
    // handle method call org.freedesktop.Telepathy.Connection.HoldHandles
    QMetaObject::invokeMethod(parent(), "HoldHandles", Q_ARG(uint, handle_type), Q_ARG(QList<uint>, handles));
}

QStringList ConnectionAdaptor::InspectHandles(uint handle_type, const QList<uint> &handles)
{
    // handle method call org.freedesktop.Telepathy.Connection.InspectHandles
    QStringList out0;
    QMetaObject::invokeMethod(parent(), "InspectHandles", Q_RETURN_ARG(QStringList, out0), Q_ARG(uint, handle_type), Q_ARG(QList<uint>, handles));
    return out0;
}

org::freedesktop::Telepathy::ChannelInfoList ConnectionAdaptor::ListChannels()
{
    // handle method call org.freedesktop.Telepathy.Connection.ListChannels
    org::freedesktop::Telepathy::ChannelInfoList out0;
    QMetaObject::invokeMethod(parent(), "ListChannels", Q_RETURN_ARG(org::freedesktop::Telepathy::ChannelInfoList, out0));
    return out0;
}

void ConnectionAdaptor::ReleaseHandles(uint handle_type, const QList<uint> &handles)
{
    qDebug() << "ReleaseHandles called from external!" << handles;
    // handle method call org.freedesktop.Telepathy.Connection.ReleaseHandles
    QMetaObject::invokeMethod(parent(), "ReleaseHandles", Q_ARG(uint, handle_type), Q_ARG(QList<uint>, handles));
}

QDBusObjectPath ConnectionAdaptor::RequestChannel(const QString &type, uint handle_type, uint handle, bool suppress_handler)
{
    // handle method call org.freedesktop.Telepathy.Connection.RequestChannel
    QDBusObjectPath out0;
    QMetaObject::invokeMethod(parent(), "RequestChannel", Q_RETURN_ARG(QDBusObjectPath, out0), Q_ARG(QString, type), Q_ARG(uint, handle_type), Q_ARG(uint, handle), Q_ARG(bool, suppress_handler));
    return out0;
}

QList<uint> ConnectionAdaptor::RequestHandles(uint handle_type, const QStringList &names)
{
    // handle method call org.freedesktop.Telepathy.Connection.RequestHandles
    QList<uint> out0;
    QMetaObject::invokeMethod(parent(), "RequestHandles", Q_RETURN_ARG(QList<uint>, out0), Q_ARG(uint, handle_type), Q_ARG(QStringList, names));
    return out0;
}

