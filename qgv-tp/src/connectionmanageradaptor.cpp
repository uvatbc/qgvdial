/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -i QtTelepathy/Core/ConnectionManagerAdaptor -i QtTelepathy/Common/ConnectionManagerTypes -a :src/Core/connectionmanageradaptor.cpp xml/tp-connmgr.xml
 *
 * dbusxml2cpp is Copyright (C) 2006 Trolltech ASA. All rights reserved.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

// EDITED FILE, DO NOT UPDATE!

#include "connectionmanageradaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtCore/QDebug>

#include "connectionmanager.h"

/*
 * Implementation of adaptor class ConnectionManagerAdaptor
 */

ConnectionManagerAdaptor::ConnectionManagerAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

ConnectionManagerAdaptor::~ConnectionManagerAdaptor()
{
    // destructor
}

org::freedesktop::Telepathy::ParameterDefinitionList ConnectionManagerAdaptor::GetParameters(const QString &proto)
{
    // handle method call org.freedesktop.Telepathy.ConnectionManager.GetParameters
    org::freedesktop::Telepathy::ParameterDefinitionList out0;
    QMetaObject::invokeMethod(parent(), "GetParameters", Q_RETURN_ARG(org::freedesktop::Telepathy::ParameterDefinitionList, out0), Q_ARG(QString, proto));
    return out0;
}

QStringList ConnectionManagerAdaptor::ListProtocols()
{
    // handle method call org.freedesktop.Telepathy.ConnectionManager.ListProtocols
    QStringList out0;
    QMetaObject::invokeMethod(parent(), "ListProtocols", Q_RETURN_ARG(QStringList, out0));
    return out0;
}

QString ConnectionManagerAdaptor::RequestConnection(const QString &proto, QVariantMap parameters, QDBusObjectPath &object_path)
{
    // handle method call org.freedesktop.Telepathy.ConnectionManager.RequestConnection
    return static_cast<ConnectionManager *>(parent())->RequestConnection(proto, parameters, object_path);
}

